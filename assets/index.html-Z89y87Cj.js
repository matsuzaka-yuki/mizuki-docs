import{_ as t,c as d,a as i,b as e,w as r,r as n,o as c,d as l}from"./app-C4LnFzBu.js";const o={};function h(u,s){const a=n("LinkCard"),p=n("VPCard");return c(),d("div",null,[s[1]||(s[1]=i(`<h2 id="部署到-vercel" tabindex="-1"><a class="header-anchor" href="#部署到-vercel"><span>部署到 Vercel</span></a></h2><p>你可以通过 Vercel 的网站 UI 或使用 Vercel 提供的官方 CLI（命令行界面）部署 Astro 站点到 Vercel。部署静态站点和按需渲染站点的过程相同。</p><h3 id="通过网站ui部署" tabindex="-1"><a class="header-anchor" href="#通过网站ui部署"><span>通过网站UI部署</span></a></h3><div class="vp-steps"><ol><li><p>将你的代码推送到你的在线 Git 存储库（GitHub、GitLab、BitBucket 等）.</p></li><li><p><a href="https://vercel.com/new" target="_blank" rel="noopener noreferrer">导入你的项目</a> 至 Vercel.</p></li><li><p>Vercel 将自动检测 Astro 项目并自动为其配置正确的设置.</p></li><li><p>你的应用程序已部署完成了！（例如：astro.vercel.app）</p></li></ol></div><p>在你的项目完成导入和部署后，所有后续内容推送到（生产分支外的）分支都将自动生成 预览部署（Preview Deployments），以及对生产分支（通常是名为“main”的分支）所做的任何更改都将自动被部署为 生产部署（Production Deployment）。</p><h3 id="通过-cli-部署-推荐" tabindex="-1"><a class="header-anchor" href="#通过-cli-部署-推荐"><span>通过 CLI 部署(推荐)</span></a></h3><div class="vp-steps"><ol><li>安装<a href="https://vercel.com/docs/cli" target="_blank" rel="noopener noreferrer">Vercel CLI</a>并运行<code>vercel</code>进行部署<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pnpm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -g</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> vercel</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vercel</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Vercel 将自动检测 Astro 项目并自动为其配置正确的设置.</li><li>当被问及<code>Want to override the settings? [y/N]</code>（想要覆盖配置吗？），选择 N（No）。</li><li>你的应用程序已部署完成了！（例如：<a href="https://astro.vercel.app/" target="_blank" rel="noopener noreferrer">astro.vercel.app</a>）</li></ol></div><h3 id="使用-vercel-json-的项目配置" tabindex="-1"><a class="header-anchor" href="#使用-vercel-json-的项目配置"><span>使用 vercel.json 的项目配置</span></a></h3><p>你可以使用 <code>vercel.json</code> 来覆盖 Vercel 的默认行为并配置其他设置。例如，你可以在部署时为 HTTP 响应附加标头。</p>`,9)),e(a,{title:"详细请参考 Vercel 文档的项目配置",href:"https://vercel.com/docs/project-configuration"}),s[2]||(s[2]=i(`<h2 id="部署到-netlify" tabindex="-1"><a class="header-anchor" href="#部署到-netlify"><span>部署到 Netlify</span></a></h2><p>Netlify 也是一个流行的静态网站托管平台。您可以直接从 GitHub 部署您的 Mizuki 博客。Netlify 会自动构建和部署您的项目，并提供持续部署功能。</p><h3 id="网站用户操作界面部署方式" tabindex="-1"><a class="header-anchor" href="#网站用户操作界面部署方式"><span>网站用户操作界面部署方式</span></a></h3><p>如果你的项目存储在 GitHub、GitLab、BitBucket 或 Azure DevOps 中，你可以使用 Netlify 的网站用户操作界面来部署你的 Astro 网站.</p><div class="vp-steps"><ol><li><p>在 <a href="https://app.netlify.com/" target="_blank" rel="noopener noreferrer">Netlify dashboard</a> 页面上，点击 Add a new site</p></li><li><p>选择 Import an existing project</p><p>当你从你的 Git 提供商中导入 Astro 仓库时，Netlify 应该会自动检测并预填充正确的配置设置。</p></li><li><p>确保已输入以下设置，然后按下 Deploy 按钮：</p><ul><li><strong>Build Command</strong>: <code>astro build</code> or <code>npm run build</code></li><li><strong>Publish directory</strong>: <code>dist</code></li></ul></li><li><p>部署后，你将被重定向到站点概览页面。在那里，你可以编辑你站点的详细信息。</p></li></ol></div><p>根据你的部署配置，未来对源代码库的任何修改都将触发预览和生产部署。</p><p><strong>netlify.toml 文件</strong></p><p>你可以选择在项目仓库的顶层创建一个新的 <code>netlify.toml</code> 文件，用来配置你的构建命令和发布目录，以及其他项目设置，包括环境变量和重定向。Netlify 将读取此文件并自动配置你的部署。</p><p>为了配置默认设置，创建一个 netlify.toml 文件，并填入以下内容：</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-toml"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  command</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">npm run build</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  publish</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dist</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多信息可以在 Netlify 的博客文章 <a href="https://www.netlify.com/blog/how-to-deploy-astro/#deploy-an-existing-git-repository-to-netlify" target="_blank" rel="noopener noreferrer">部署现有的 Astro Git 仓库</a> 中找到。</p><h3 id="cli-部署方式" tabindex="-1"><a class="header-anchor" href="#cli-部署方式"><span>CLI 部署方式</span></a></h3><p>你也可以在 Netlify 上创建一个新的站点，并通过安装和使用 Netlify CLI 来关联你的 Git 仓库。</p><div class="vp-steps"><ol><li><p>全局安装 Netlify CLI 工具</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> netlify-cli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>运行 <code>netlify login</code> 并按照指示进行登录并授权 Netlify。</p></li><li><p>运行 <code>netlify init</code> 并按照指示进行操作。</p></li><li><p>确认你的构建命令 (<code>astro build</code>)</p><p>CLI 将自动检测构建设置（<code>astro build</code>）和部署目录（<code>dist</code>），并将提供一个自动生成且有这些对应设置的 <code>netlify.toml</code> 文件。</p></li><li><p>推送到 Git 来触发构建和部署</p><p>CLI 将向仓库添加一个部署密钥，这意味着每次你使用 git push 时，你的网站都会在 Netlify 上自动重新构建。</p></li></ol></div>`,14)),e(a,{title:"更多详情请参阅 Netlify 的文章",href:"https://www.netlify.com/blog/how-to-deploy-astro/#link-your-astro-project-and-deploy-using-the-netlify-cli"}),s[3]||(s[3]=i(`<h2 id="部署到-github-pages" tabindex="-1"><a class="header-anchor" href="#部署到-github-pages"><span>部署到 GitHub Pages</span></a></h2><p>如果您希望将博客托管在 GitHub Pages 上，Mizuki 项目通常会包含一个 GitHub Actions 工作流，可以帮助您自动化部署过程。您需要确保在 <code>astro.config.mjs</code> 中配置正确的 <code>base</code> 路径。</p><h3 id="部署到-github-io-网址" tabindex="-1"><a class="header-anchor" href="#部署到-github-io-网址"><span>部署到 github.io 网址</span></a></h3><p>在 <code>astro.config.mjs</code> 中配置文件设置 <code>site</code> 和 <code>base</code> 选项。</p><div class="language-astro.config.mjs line-numbers-mode" data-highlighter="shiki" data-ext="astro.config.mjs" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-astro.config.mjs"><span class="line"><span>import { defineConfig } from &#39;astro/config&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>  site: &#39;https://astronaut.github.io&#39;,</span></span>
<span class="line"><span>  base: &#39;my-repo&#39;,</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Site</strong></p><p><code>site</code> 的值必须是以下之一：</p><ul><li>基于你的用户名的以下网址: <code>https://&lt;username&gt;.github.io</code></li><li>为 GitHub 组织的私有页面 自动生成的随机网址：<code>https://&lt;random-string&gt;.pages.github.io/</code></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><pre><code>如果出现了以下情况，则不要设置 base 参数：

你的页面是由根文件夹所提供。
你的源码存储库是位于 https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io。
</code></pre></div><p><strong>Base</strong></p><p><code>base</code> 的值应该是你的仓库名称，以正斜杠开头，例如 <code>/my-blog</code>。这样做是为了让 Astro 理解你的网站根目录是 <code>/my-repo</code>，而不是默认的 <code>/</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当配置了这个值后，你所有的内部页面链接都必须以你的 base 值作为前缀：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">a</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/my-repo/about</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">关于本站</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看更多关于配置 <a href="https://docs.astro.build/zh-cn/reference/configuration-reference/#base" target="_blank" rel="noopener noreferrer"><code>base</code></a> 值的信息。</p></div><h3 id="在-github-pages-上使用自定义域名" tabindex="-1"><a class="header-anchor" href="#在-github-pages-上使用自定义域名"><span>在 GitHub Pages 上使用自定义域名</span></a></h3>`,13)),e(p,{title:"设置一个自定义域",icon:"twemoji:astonished-face"},{default:r(()=>s[0]||(s[0]=[l("pre",null,[l("code",null,`你可以选择通过将一个 ./public/CNAME 文件添加到你的项目中，来设置自定义域
这会将你的站点部署在你的自定义域而不是 <YOUR_USERNAME>.github.io。
不要忘记为你的域名提供商配置 DNS。
`)],-1)])),_:1,__:[0]}),s[4]||(s[4]=i(`<div class="language-cname line-numbers-mode" data-highlighter="shiki" data-ext="cname" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cname"><span class="line"><span>sub.mydomain.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要配置 Astro 以在 GitHub Pages 上使用自定义域名，请将你的域名设置为 site 的值。不要为 <code>base</code> 设置值：</p><div class="language-astro.config.mjs line-numbers-mode" data-highlighter="shiki" data-ext="astro.config.mjs" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-astro.config.mjs"><span class="line"><span>import { defineConfig } from &#39;astro/config&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default defineConfig({</span></span>
<span class="line"><span>    site: &#39;https://example.com&#39;,</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-github-action" tabindex="-1"><a class="header-anchor" href="#配置-github-action"><span>配置 GitHub Action</span></a></h3><div class="vp-steps"><ol><li>在你的项目中的 <code>.github/workflows/</code> 目录创建一个新文件 <code>deploy.yml</code>，并粘贴以下 YAML 配置信息。<div class="language-deploy.yml line-numbers-mode" data-highlighter="shiki" data-ext="deploy.yml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-deploy.yml"><span class="line"><span>name: Deploy to GitHub Pages</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span># 每次推送到 \`main\` 分支时触发这个“工作流程”</span></span>
<span class="line"><span># 如果你使用了别的分支名，请按需将 \`main\` 替换成你的分支名</span></span>
<span class="line"><span>push:</span></span>
<span class="line"><span>    branches: [ main ]</span></span>
<span class="line"><span># 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”</span></span>
<span class="line"><span>workflow_dispatch:</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 允许 job 克隆 repo 并创建一个 page deployment</span></span>
<span class="line"><span>permissions:</span></span>
<span class="line"><span>contents: read</span></span>
<span class="line"><span>pages: write</span></span>
<span class="line"><span>id-token: write</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>build:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>    - name: Checkout your repository using git</span></span>
<span class="line"><span>        uses: actions/checkout@v4</span></span>
<span class="line"><span>    - name: Install, build, and upload your site</span></span>
<span class="line"><span>        uses: withastro/action@v3</span></span>
<span class="line"><span>        # with:</span></span>
<span class="line"><span>        # path: . # 存储库中 Astro 项目的根位置。（可选）</span></span>
<span class="line"><span>        # node-version: 20 # 用于构建站点的特定 Node.js 版本，默认为 20。（可选）</span></span>
<span class="line"><span>        # package-manager: pnpm@latest # 应使用哪个 Node.js 包管理器来安装依赖项和构建站点。会根据存储库中的 lockfile 自动检测。（可选）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>deploy:</span></span>
<span class="line"><span>    needs: build</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    environment:</span></span>
<span class="line"><span>    name: github-pages</span></span>
<span class="line"><span>    url: \${{ steps.deployment.outputs.page_url }}</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>    - name: Deploy to GitHub Pages</span></span>
<span class="line"><span>        id: deployment</span></span>
<span class="line"><span>        uses: actions/deploy-pages@v4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>（可选）如果你在本地开发期间或预览构建期间，将环境变量传入给 Astro 项目，则需要定义 deploy.yml 文件中的任何公共变量，以便在部署到 Github 页面时处理它们。<div class="language-deploy.yml line-numbers-mode" data-highlighter="shiki" data-ext="deploy.yml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-deploy.yml"><span class="line"><span>jobs:</span></span>
<span class="line"><span>build:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>    - name: Checkout your repository using git</span></span>
<span class="line"><span>        uses: actions/checkout@v4</span></span>
<span class="line"><span>    - name: Install, build, and upload your site</span></span>
<span class="line"><span>        uses: withastro/action@v3</span></span>
<span class="line"><span>        env:</span></span>
<span class="line"><span>        # 使用单引号来包裹变量值</span></span>
<span class="line"><span>        PUBLIC_EVM_WALLET_ADDRESS: &#39;0x4bFc229A40d41698154336aFF864f61083E76659&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在 GitHub 上，跳转到存储库的 Settings 选项卡并找到设置的 Pages 部分。</li><li>选择 GitHub Actions 作为你网站的 Source，然后按 Save。</li><li>选择 GitHub Actions 作为你网站的 Source，然后按 Save。</li></ol></div><p>你的网站现在应该已完成发布了！当你将更改推送到 Astro 项目的存储库时，GitHub Action 将自动为你部署它们。</p><h2 id="部署到服务器上" tabindex="-1"><a class="header-anchor" href="#部署到服务器上"><span>部署到服务器上</span></a></h2><p>首先我们执行构建命令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来压缩<code>dist</code>上传到你的服务器上,使用<code>Nginx</code>或者<code>Apache</code>等服务器软件进行部署,静态网站方案即可。</p>`,10))])}const g=t(o,[["render",h]]),k=JSON.parse('{"path":"/guide/deployment/","title":"部署","lang":"zh-CN","frontmatter":{"title":"部署","createTime":"2025/08/17 15:53:35","permalink":"/guide/deployment/"},"readingTime":{"minutes":6.49,"words":1948},"git":{},"filePathRelative":"notes/1.guide/3.deployment.md","headers":[]}');export{g as comp,k as data};
